generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id            String         @id
  shop          String
  state         String
  isOnline      Boolean        @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean        @default(false)
  locale        String?
  collaborator  Boolean?       @default(false)
  emailVerified Boolean?       @default(false)
  Configuration Configuration?
}

model Configuration {
  id               Int     @id @default(autoincrement())
  sessionId        String  @unique
  shop             String  @unique
  accountName      String?
  ready            Boolean @default(true)
  apiVersion       String  @default("unstable")
  testMode         Boolean @default(true)
  merchantKey      String
  merchantPassword String
  with_CVV         Boolean @default(false)
  without_CVV      Boolean @default(false)
  session          Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([sessionId], map: "configuration_session_id")
}

model PaymentSession {
  id            String           @id @default(uuid())
  gid           String
  group         String
  amount        Decimal
  test          Boolean
  currency      String
  kind          String
  shop          String
  paymentMethod String
  customer      String           @db.Text
  cancelUrl     String?
  proposedAt    DateTime
  status        String?
  captures      CaptureSession[]
  refunds       RefundSession[]
  void          VoidSession?
}

model RefundSession {
  id         String         @id
  gid        String
  paymentId  String
  amount     Decimal
  currency   String
  proposedAt DateTime
  status     String?
  payment    PaymentSession @relation(fields: [paymentId], references: [id])

  @@index([paymentId], map: "RefundSession_paymentId_fkey")
}

model CaptureSession {
  id         String         @id
  gid        String
  paymentId  String
  amount     Decimal
  currency   String
  proposedAt DateTime
  status     String?
  payment    PaymentSession @relation(fields: [paymentId], references: [id])

  @@index([paymentId], map: "CaptureSession_paymentId_fkey")
}

model VoidSession {
  id         String         @id
  gid        String
  paymentId  String         @unique
  proposedAt DateTime
  status     String?
  payment    PaymentSession @relation(fields: [paymentId], references: [id])
}

model CustomerData {
  id    String  @id @default(uuid())
  shop  String
  email String
  token String
  phone String?
}
